{"version":3,"sources":["component/NavBar.js","component/ChessLogic.js","component/ChessComputer.js","component/ChessController.js","component/ChessBoard.js","component/Menu.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","current","handleClick","e","console","log","setState","key","this","onClick","selectedKeys","mode","Item","Component","ChessLogic","tileArr","emptyArr","castle","peasant","Tiles","generateChessBoard","Castle","Winner","Passant","row","col","getPiece","sourceRow","sourceCol","destRow","destCol","promoteTo","sourceTile","destTile","eaten","getColor","piece","validPassant","setPassant","handlePromotion","handleCastle","disableCastle","Math","abs","direction","movePiece","letterToReplace","toLowerCase","regex","RegExp","replace","tile","color","validMoves","getValidRookTiles","getValidKnightTiles","getValidBishopTiles","getValidKingTiles","getValidPawnTiles","curRow","curCol","pushToValid","rowArr","colArr","i","colCounter","rowCounter","j","startRow","includes","push","distance","pushToValidPawn","map","tileInfo","pieceArr","tiles","TileInfo","arr","generatePiece","rowNum","colNum","substr","pieceValue","generateMoveMinMax","board","turn","recursiveCall","futureMove","futureValue","nextTurn","min","optimalMove","optimalValue","getValidTiles","forEach","validTile","nextBoard","clone","curValue","ChessController","afterVictoryCallback","computerOption","playerColor","getComputerMove","Blocks","generateBlocks","emptyBlock","selectedBlock","moveList","aftermatch","showVictoryScreen","block","highlight","recordMove","checkWinner","moveArr","split","x","length","String","fromCharCode","getWinner","validMove","type","unhighlight","getBlock","blockRow","blocks","Row","Block","ChessBoard","props","location","undefined","bind","forceUpdate","setTimeout","handleComputerTurn","concat","winner","info","title","content","onOk","slice","reverse","rowContent","className","src","getImagePath","alt","to","size","bordered","header","dataSource","renderItem","item","style","marginBottom","renderBoard","menu","renderMenu","MenuCard","pathname","option","cover","img","Meta","ChoiceCard","Menu","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4356eec3.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Menu} from 'antd';\nimport 'antd/dist/antd.less';\n\nclass NavBar extends Component {\n    state = {\n      current: 'home',\n    };\n\n    handleClick = (e) => {\n      console.log('click ', e);\n      // eslint-disable-next-line no-invalid-this\n      this.setState({current: e.key});\n    };\n\n    render() {\n      const {current} = this.state;\n      return (\n        <Menu\n          onClick={this.handleClick}\n          selectedKeys={[current]}\n          mode=\"horizontal\"\n        >\n          <Menu.Item key=\"home\">\n                    home\n          </Menu.Item>\n          <Menu.Item key=\"login\">\n                    login\n          </Menu.Item>\n        </Menu>\n      );\n    }\n}\n\nexport default NavBar;\n","class ChessLogic {\n  constructor(tileArr = emptyArr(), castle = 'KQkq', peasant = '') {\n    this.Tiles = generateChessBoard(tileArr);\n    this.Castle = castle;\n    this.Winner = 'none';\n    this.Passant = peasant;\n  }\n\n  getWinner() {\n    return this.Winner;\n  }\n\n  getPiece(row, col) {\n    return this.Tiles[row][col].getPiece();\n  }\n\n  movePiece(sourceRow, sourceCol, destRow, destCol, promoteTo = 'Queen') {\n    const sourceTile = this.Tiles[sourceRow][sourceCol];\n    const destTile = this.Tiles[destRow][destCol];\n\n    let eaten = destTile.getPiece();\n\n    if (eaten === 'King') {\n      this.Winner = destTile.getColor() === 'white' ?\n        'Black' : 'White';\n    }\n\n    destTile.piece = sourceTile.piece;\n\n    // eslint-disable-next-line default-case\n    switch (sourceTile.getPiece()) {\n    case ('Pawn'):\n      if (this.validPassant(sourceTile, destTile)) {\n        eaten = 'Pawn';\n        this.Tiles[destRow][sourceCol].piece = 'empty';\n      }\n      this.setPassant(sourceTile, destTile);\n      this.handlePromotion(sourceTile, destTile, promoteTo);\n      break;\n    case ('King'):\n      this.handleCastle(sourceTile, destTile);\n      this.disableCastle(sourceTile);\n      break;\n    case ('Rook'):\n      this.disableCastle(sourceTile);\n      break;\n    }\n\n    sourceTile.piece = 'empty';\n\n    return eaten;\n  }\n\n  validPassant(sourceTile, destTile) {\n    return (sourceTile.getPiece() === 'Pawn' &&\n      '' + destTile.row + destTile.col === this.Passant);\n  }\n\n  setPassant(sourceTile, destTile) {\n    if (Math.abs(destTile.row - sourceTile.row) === 2) {\n      const direction = sourceTile.getColor() === 'white' ? 1 : -1;\n      this.Passant = '' + (sourceTile.row + direction) + sourceTile.col;\n    }\n  }\n\n  handlePromotion(sourceTile, destTile, promoteTo) {\n    if (destTile.row === 0 || destTile.row === 7) {\n      destTile.piece = sourceTile.getColor() + promoteTo;\n    }\n  }\n\n  handleCastle(sourceTile, destTile) {\n    if (Math.abs(destTile.col - sourceTile.col) > 1) {\n      if (destTile.col === 2) {\n        this.movePiece(sourceTile.row, 0, sourceTile.row, 3);\n      } else if (destTile.col === 6) {\n        this.movePiece(sourceTile.row, 7, sourceTile.row, 5);\n      }\n    }\n  }\n\n  disableCastle(sourceTile) {\n    let letterToReplace = sourceTile.getPiece() === 'King' ? 'KQ' :\n      sourceTile.col === 0 ? 'Q' : 'K';\n\n    if (sourceTile.getColor() === 'black') {\n      letterToReplace = letterToReplace.toLowerCase();\n    }\n\n    const regex = new RegExp(letterToReplace, '');\n    this.Castle = this.Castle.replace(regex, '');\n  }\n\n  getValidTiles(row, col) {\n    const tile = this.Tiles[row][col];\n\n    const color = tile.getColor();\n    const piece = tile.getPiece();\n\n    const validMoves = [];\n\n    // eslint-disable-next-line default-case\n    switch (piece) {\n    case ('Rook'): {\n      this.getValidRookTiles(col, row, color, validMoves);\n      break;\n    }\n    case ('Knight'): {\n      this.getValidKnightTiles(col, row, color, validMoves);\n      break;\n    }\n    case ('Bishop'): {\n      this.getValidBishopTiles(col, row, color, validMoves);\n      break;\n    }\n    case ('King'): {\n      this.getValidKingTiles(col, row, color, validMoves);\n      break;\n    }\n    case ('Queen'):\n      this.getValidBishopTiles(col, row, color, validMoves);\n      this.getValidRookTiles(col, row, color, validMoves);\n      break;\n    case ('Pawn'): {\n      this.getValidPawnTiles(col, row, color, validMoves);\n      break;\n    }\n    }\n\n    return validMoves;\n  }\n\n  getValidKnightTiles(col, row, color, validMoves) {\n    for (let curRow = 1; curRow < 3; curRow++) {\n      const curCol = 3 - curRow;\n\n      this.pushToValid(row + curRow, col + curCol, color, validMoves);\n      this.pushToValid(row + curRow, col - curCol, color, validMoves);\n      this.pushToValid(row - curRow, col - curCol, color, validMoves);\n      this.pushToValid(row - curRow, col + curCol, color, validMoves);\n    }\n  }\n\n  getValidRookTiles(col, row, color, validMoves) {\n    const rowArr = [-1, 0, 0, 1];\n    const colArr = [0, -1, 1, 0];\n\n    for (let i = 0; i < 4; i++) {\n      let curRow = rowArr[i] + row;\n      let curCol = colArr[i] + col;\n\n      while (this.pushToValid(curRow, curCol, color, validMoves)) {\n        curRow += rowArr[i];\n        curCol += colArr[i];\n      }\n    }\n  }\n\n  getValidBishopTiles(col, row, color, validMoves) {\n    for (let i = 0; i < 5; i++) {\n      const colCounter = (i < 1.5) ? 1 : -1;\n      let curCol = col + colCounter;\n\n      const rowCounter = (i % 2) ? 1 : -1;\n      let curRow = row + rowCounter;\n\n      while (this.pushToValid(curRow, curCol, color, validMoves)) {\n        curCol += colCounter;\n        curRow += rowCounter;\n      }\n    }\n  }\n\n  getValidKingTiles(col, row, color, validMoves) {\n    for (let i = -1; i < 2; i++) {\n      for (let j = -1; j < 2; j++) {\n        this.pushToValid(row + i, col + j, color, validMoves);\n      }\n    }\n\n    const startRow = color === 'white' ? 0 : 7;\n\n    if (((color === 'white' && this.Castle.includes('K')) ||\n      (color === 'black' && this.Castle.includes('k'))) &&\n      this.Tiles[startRow][6].getColor() === 'empty' &&\n      this.Tiles[startRow][5].getColor() === 'empty') {\n      validMoves.push(this.Tiles[startRow][6]);\n    }\n\n    if (((color === 'white' && this.Castle.includes('Q')) ||\n      (color === 'black' && this.Castle.includes('q'))) &&\n      this.Tiles[startRow][1].getColor() === 'empty' &&\n      this.Tiles[startRow][2].getColor() === 'empty' &&\n      this.Tiles[startRow][3].getColor() === 'empty') {\n      validMoves.push(this.Tiles[startRow][2]);\n    }\n  }\n\n  getValidPawnTiles(col, row, color, validMoves) {\n    const distance = (row === 1 || row === 6) ? 3 : 2;\n    const direction = color === 'white' ? 1 : -1;\n\n    for (let i = 1; i < distance; i++) {\n      const curTile = this.Tiles[row + i * direction][col];\n\n      if (curTile.piece === 'empty') {\n        this.pushToValid(row + i * direction, col, color, validMoves);\n      } else {\n        break;\n      }\n    }\n\n    this.pushToValidPawn(row + direction, col + 1, color, validMoves);\n    this.pushToValidPawn(row + direction, col - 1, color, validMoves);\n  }\n\n  pushToValid(row, col, color, validMoves) {\n    if (row > 7 || row < 0 || col > 7 || col < 0) {\n      return false;\n    }\n    const tile = this.Tiles[row][col];\n\n    if (tile.getColor() === 'empty') {\n      validMoves.push(tile);\n      return true;\n    } else {\n      if (tile.getColor() !== color) {\n        validMoves.push(tile);\n      }\n      return false;\n    }\n  }\n\n  pushToValidPawn(row, col, color, validMoves) {\n    if (row > -1 && row < 8 && col > -1 && col < 8) {\n      const tile = this.Tiles[row][col];\n\n      if ('' + tile.row + tile.col === this.Passant) {\n        validMoves.push(tile);\n      } else if ((tile.getColor() !== 'empty' && tile.getColor() !== color) ||\n          '' + tile.row + tile.col === this.Passant) {\n        validMoves.push(tile);\n      }\n    }\n  }\n\n  clone() {\n    return new ChessLogic(\n      this.Tiles.map((row) =>\n        row.map((tileInfo) => tileInfo.piece),\n      ),\n      this.Castle,\n      this.Passant,\n    );\n  }\n}\n\nfunction generateChessBoard(pieceArr) {\n  const tiles = [];\n\n  for (let i = 0; i < 8; i++) {\n    const curRow = [];\n    for (let j = 0; j < 8; j++) {\n      curRow.push(new TileInfo(i, j, pieceArr[i][j]));\n    }\n    tiles.push(curRow);\n  }\n\n  return tiles;\n}\n\n\nfunction emptyArr() {\n  const arr = [];\n\n  for (let i = 0; i < 8; i++) {\n    const curRow = [];\n    for (let j = 0; j < 8; j++) {\n      curRow.push(generatePiece(i, j));\n    }\n    arr.push(curRow);\n  }\n\n  return arr;\n}\n\nfunction generatePiece(rowNum, colNum) {\n  if (rowNum < 1) {\n    switch (Math.abs(7 - 2 * colNum)) {\n    case 7:\n      return 'whiteRook';\n    case 5:\n      return 'whiteKnight';\n    case 3:\n      return 'whiteBishop';\n    case 1:\n      return colNum === 4 ? 'whiteKing' : 'whiteQueen';\n    default:\n      return 'empty';\n    }\n  } else if (rowNum < 2) {\n    return 'whitePawn';\n  } else if (rowNum < 6) {\n    return 'empty';\n  } else if (rowNum < 7) {\n    return 'blackPawn';\n  } else if (rowNum < 8) {\n    switch (Math.abs(7 - 2 * colNum)) {\n    case 7:\n      return 'blackRook';\n    case 5:\n      return 'blackKnight';\n    case 3:\n      return 'blackBishop';\n    case 1:\n      return colNum === 4 ? 'blackKing' : 'blackQueen';\n    default:\n      return 'empty';\n    }\n  }\n}\n\nclass TileInfo {\n  constructor(rowNum, colNum, piece = this.generatePiece(rowNum, colNum)) {\n    this.row = rowNum;\n    this.col = colNum;\n\n    this.piece = piece;\n  }\n\n  getColor() {\n    return this.piece.substr(0, 5);\n  }\n\n  getPiece() {\n    return this.piece.substr(5);\n  }\n\n  clone() {\n    return new TileInfo(this.row, this.col, this.piece);\n  }\n}\n\nexport {ChessLogic, TileInfo};\n","const pieceValue = {\n  'Queen': 90,\n  'King': 2000,\n  'Rook': 50,\n  'Knight': 30,\n  'Bishop': 30,\n  'Pawn': 10,\n  '': 0,\n};\n\n// Time complexity is O(2^n)\n// Takes 3 min in my computer when running 6 recursion\nexport function generateMoveMinMax(board, turn, recursiveCall) {\n  if (recursiveCall === 0) {\n    const futureValue = 0;\n    const futureMove = '';\n\n    return {futureMove, futureValue};\n  }\n\n  const nextTurn = turn === 'white' ? 'black' : 'white';\n\n  // Make sure that the HTML request couldn't take too much processing power\n  recursiveCall = Math.min(recursiveCall, 5);\n\n  let optimalMove = '';\n  let optimalValue = 'nodef';\n\n  for (let row = 0; row < 8; row++) {\n    for (let col = 0; col < 8; col++) {\n      const tile = board.Tiles[row][col];\n\n      if (tile.piece.substr(0, 5) === turn) {\n        board.getValidTiles(row, col).forEach((validTile) => {\n          const nextBoard = board.clone();\n\n          const curValue = pieceValue[\n            nextBoard.movePiece(row, col, validTile.row, validTile.col)];\n\n          const {futureMove, futureValue} = generateMoveMinMax(nextBoard,\n            nextTurn, recursiveCall - 1);\n\n          if (turn === 'white') {\n            if (optimalValue === 'nodef' ||\n              curValue + futureValue > optimalValue) {\n              optimalValue = futureValue + curValue;\n              // eslint-disable-next-line max-len\n              optimalMove = '' + row + col + validTile.row + validTile.col + futureMove;\n            }\n          } else {\n            if (optimalValue === 'nodef' ||\n              -curValue + futureValue < optimalValue) {\n              optimalValue = futureValue - curValue;\n              // eslint-disable-next-line max-len\n              optimalMove = '' + row + col + validTile.row + validTile.col + futureMove;\n            }\n          }\n        });\n      }\n    }\n  }\n  return {futureMove: optimalMove, futureValue: optimalValue};\n}\n","import {ChessLogic} from './ChessLogic';\nimport {generateMoveMinMax} from './ChessComputer';\n\nclass ChessController {\n  constructor({afterVictoryCallback = () => {},\n    computerOption = 'local', playerColor = 'white'}={}) {\n    console.log(computerOption);\n    console.log(playerColor);\n\n    this.getComputerMove = generateMoveMinMax;\n\n    this.ChessLogic = new ChessLogic();\n    this.Blocks = this.generateBlocks();\n    this.turn = 'white';\n\n    this.emptyBlock = 'empty';\n    this.selectedBlock = this.emptyBlock;\n\n    this.computerOption = computerOption;\n    this.playerColor = playerColor;\n    this.moveList = [];\n\n    this.aftermatch = false;\n    this.showVictoryScreen = afterVictoryCallback;\n  }\n\n  handleClick(block) {\n    if (this.turn !== this.playerColor && this.computerOption === 'computer') {\n      return;\n    }\n\n    if (this.selectedBlock === 'empty' ||\n      this.selectedBlock.getPiece() === 'empty') {\n      if (this.turn === block.getColor()) {\n        this.highlight(block);\n        this.selectedBlock = block;\n      }\n    } else if (this.movePiece(block)) {\n      this.turn = (this.turn === 'white') ? 'black' : 'white';\n\n      this.recordMove(block.getPiece().substr(5), block.row, block.col);\n\n      this.checkWinner();\n    }\n  }\n\n  handleComputerTurn() {\n    if (this.turn === this.playerColor || this.computerOption !== 'computer') {\n      return;\n    }\n\n    // Take the computer future move and map it to int array\n    const moveArr = generateMoveMinMax(this.ChessLogic, this.turn, 3)\n      .futureMove.split``.map((x)=>+x);\n\n    this.recordMove(this.ChessLogic.getPiece(moveArr[0], moveArr[1]),\n      moveArr[2], moveArr[3]);\n\n    this.ChessLogic.movePiece(moveArr[0], moveArr[1], moveArr[2], moveArr[3]);\n\n    this.turn = (this.turn === 'white') ? 'black' : 'white';\n\n    this.checkWinner();\n  }\n\n  recordMove(piece, destRow, destCol) {\n    this.moveList.push(\n      (this.moveList.length + 1) + '. \\t' +\n      piece +\n      ' move to ' +\n      String.fromCharCode(destCol + 65) +\n      (destRow + 1));\n  }\n\n  checkWinner() {\n    if (this.ChessLogic.getWinner() !== 'none' && !this.aftermatch) {\n      this.aftermatch = true;\n      this.showVictoryScreen(this.ChessLogic.getWinner());\n    }\n  }\n\n  movePiece(block) {\n    let validMove = false;\n\n    if (block.type === 'HighlightBlock') {\n      this.ChessLogic.movePiece(this.selectedBlock.row, this.selectedBlock.col,\n        block.row, block.col);\n\n      validMove = true;\n    }\n    this.selectedBlock = this.emptyBlock;\n    this.unhighlight();\n\n    return validMove;\n  }\n\n  highlight(block) {\n    this.ChessLogic.getValidTiles(block.row, block.col).forEach( (tile) =>\n      this.getBlock(tile).highlight(),\n    );\n  }\n\n  unhighlight() {\n    this.Blocks.forEach( (blockRow) =>\n      blockRow.forEach( (block) => block.unhighlight(),\n      ),\n    );\n  }\n\n  generateBlocks() {\n    const blocks = [];\n    for (let row = 0; row < 8; row++) {\n      const Row = [];\n      for (let col = 0; col < 8; col++) {\n        Row.push(new Block(row, col, this.ChessLogic.Tiles[row][col]));\n      }\n      blocks.push(Row);\n    }\n\n    return blocks;\n  }\n\n  getBlock(tile) {\n    return this.Blocks[tile.row][tile.col];\n  }\n}\n\nclass Block {\n  constructor(row, col, tile) {\n    this.row = row;\n    this.col = col;\n    this.tile = tile;\n    this.unhighlight();\n  }\n\n  highlight() {\n    this.type = 'HighlightBlock';\n  }\n\n  unhighlight() {\n    this.type = (this.row + this.col) % 2 ? 'LightBlock' : 'DarkBlock';\n  }\n\n  getColor() {\n    return this.tile.getColor();\n  }\n\n  getPiece() {\n    return this.tile.getColor() + this.tile.getPiece();\n  }\n}\n\nexport default ChessController;\n","import React, {Component} from 'react';\nimport 'antd/dist/antd.less';\nimport './ChessBoard.less';\nimport {Modal, Row, Card, List, Button} from 'antd';\nimport ChessController from './ChessController';\nimport {Link} from 'react-router-dom';\n\nclass ChessBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    console.log(props.location.state);\n\n    if (props.location.state === undefined) {\n      props.location.state = {\n        computerOption: 'local',\n        playerColor: 'white',\n      };\n    }\n\n    this.ChessController = new ChessController({\n      afterVictoryCallback: this.showVictoryScreen,\n      computerOption: props.location.state.computerOption,\n      playerColor: props.location.state.playerColor,\n    });\n\n    this.state = {\n      Blocks: this.ChessController.Blocks,\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(block) {\n    this.ChessController.handleClick(block);\n    this.forceUpdate();\n\n    setTimeout(() => {\n      this.ChessController.handleComputerTurn();\n      this.forceUpdate();\n    }, 1);\n  }\n\n\n  getImagePath(piece) {\n    return ''.concat('pieceImages/', piece, '.png');\n  }\n\n  showVictoryScreen(winner) {\n    Modal.info({\n      title: winner + ' Wins!',\n      content: (\n        <div>\n          <p>Return to main menu for new game</p>\n        </div>\n      ),\n      onOk() {},\n    });\n  }\n\n  renderBoard() {\n    const block = this.state.Blocks.slice(0).reverse().map(\n      // Map each block row into an HTML row\n      (blockRow) => {\n        // Map each block' row's column into an individual HTML button\n        const rowContent = blockRow.map( (block) => {\n          return (\n            <div\n              key={block.col + block.row * 8}\n              onClick={this.handleClick.bind(this, block)}\n              className={block.type}>\n\n              {block.getPiece() === 'empty' ? null :\n                <img\n                  src={this.getImagePath(block.getPiece())}\n                  className={block.type + 'Piece'}\n                  alt={block.getPiece()}\n                />}\n\n            </div>\n          );\n        });\n\n        return (\n          <Row key={rowContent[0].key / 8}>{rowContent}</Row>\n        );\n      },\n    );\n\n    return (\n      <div className=\"Square\">{block}</div>\n    );\n  }\n\n  renderMenu() {\n    return (\n      <Card className=\"SideMenu\">\n        <Link to=\"/\">\n          <Button block>Return to Main Menu</Button>\n        </Link>\n\n        <List\n          className=\"MoveList\"\n          size=\"small\"\n          bordered=\"true\"\n          header={<div>Move List</div>}\n          dataSource={this.ChessController.moveList}\n          renderItem={(item) => (\n            <List.Item style={{marginBottom: '0px'}}>\n              <p className=\"SmallFont\">{item}</p>\n            </List.Item>\n          )}\n        />\n      </Card>\n    );\n  }\n\n  render() {\n    const board = this.renderBoard();\n    const menu = this.renderMenu();\n\n    return (\n      <Row className=\"Centered\">\n        {board}\n        {menu}\n      </Row>\n    );\n  }\n}\n\nexport default ChessBoard;\n","// Use link and Hooks\nimport React from 'react';\nimport {Card, Row} from 'antd';\nimport {Link} from 'react-router-dom';\nimport './Menu.less';\n\nfunction MenuCard(props) {\n  return (\n    <div className=\"MenuCard\">\n      <Link to={{\n        pathname: '/play',\n        state: {option: props.option},\n      }}>\n        <Card\n          cover={\n            <img\n              alt={props.title}\n              src={props.img}\n            />\n          }\n        >\n          <Card.Meta\n            title={props.title}\n          />\n        </Card>\n      </Link>\n    </div>\n  );\n}\n\nfunction ChoiceCard(props) {\n  return (\n    <div className=\"MenuCard\">\n      <Card className=\"HideOnHover\"\n        cover={\n          <img\n            alt={props.title}\n            src={props.img}\n          />\n        }\n      >\n        <Card.Meta\n          title={props.title}\n        />\n      </Card>\n\n      <div className=\"Underneath\">\n        <Row className=\"Row\">\n          <Link to={{\n            pathname: '/play',\n            state: {computerOption: props.computerOption,\n              playerColor: 'white'},\n          }}>\n            <Card className=\"Choice\"\n              bordered={true}\n              cover={\n                <img\n                  alt={props.title}\n                  src={props.img}\n                />\n              }\n            >\n              <Card.Meta\n                title=\"Play as White\"\n              />\n            </Card>\n          </Link>\n\n          <Link to={{\n            pathname: '/play',\n            state: {computerOption: props.computerOption,\n              playerColor: 'black'},\n          }}>\n            <Card className=\"Choice\"\n              bordered={true}\n              cover={\n                <img\n                  alt={props.title}\n                  src={props.img}\n                />\n              }\n            >\n              <Card.Meta\n                title=\"Play as Black\"\n              />\n            </Card>\n          </Link>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nfunction Menu() {\n  return (\n    <Row className=\"Centered\">\n      <MenuCard\n        option={'local'}\n        img={'https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png'}\n        title={'Local Multiplayer'}\n      />\n\n      <ChoiceCard\n        computerOption={'computer'}\n        img={'https://gw.alipayobjects.com/zos/rmsportal/JiqGstEfoWAOHiTxclqi.png'}\n        title={'Versus Computer'}\n      />\n    </Row>\n  );\n}\n\nexport default Menu;\n","import React from 'react';\nimport './App.less';\nimport NavBar from './component/NavBar';\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport ChessBoard from './component/ChessBoard';\nimport Menu from './component/Menu';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <NavBar />\n        <Router>\n          <Switch>\n            <Route path=\"/\" exact component={Menu}/>\n            <Route path=\"/play\" exact component={ChessBoard}/>\n          </Switch>\n        </Router>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}