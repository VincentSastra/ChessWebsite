{"version":3,"sources":["component/ChessLogic.js","component/ChessComputer.js","component/ChessController.js","component/ChessBoard.js","component/Menu.js","App.js","serviceWorker.js","index.js"],"names":["ChessLogic","tileArr","emptyArr","castle","peasant","this","Tiles","generateChessBoard","Castle","Winner","Passant","row","col","getPiece","sourceRow","sourceCol","destRow","destCol","promoteTo","sourceTile","destTile","eaten","getColor","piece","validPassant","handlePromotion","handleCastle","disableCastle","setPassant","Math","abs","direction","movePiece","letterToReplace","toLowerCase","regex","RegExp","replace","tile","color","validMoves","getValidRookTiles","getValidKnightTiles","getValidBishopTiles","getValidKingTiles","getValidPawnTiles","curRow","curCol","pushToValid","rowArr","colArr","i","colCounter","rowCounter","j","startRow","includes","push","distance","rowDestination","pushToValidPawn","map","tileInfo","pieceArr","tiles","TileInfo","arr","generatePiece","rowNum","colNum","substr","pieceValue","generateMoveMinMax","board","turn","recursiveCall","futureMove","futureValue","nextTurn","min","optimalMove","optimalValue","getValidTiles","forEach","validTile","nextBoard","clone","curValue","ChessController","afterVictoryCallback","computerOption","playerColor","getComputerMove","Blocks","generateBlocks","emptyBlock","selectedBlock","moveList","aftermatch","showVictoryScreen","block","highlight","recordMove","checkWinner","moveArr","split","x","length","String","fromCharCode","getWinner","validMove","type","unhighlight","getBlock","blockRow","blocks","Row","Block","getTile","ChessBoard","props","console","log","location","state","undefined","winner","setState","modalShow","closeModal","handleClick","bind","forceUpdate","setTimeout","handleComputerTurn","concat","slice","reverse","rowContent","Col","onClick","id","src","getImagePath","alt","key","className","Card","to","Button","ListGroup","variant","item","Item","Modal","size","aria-labelledby","centered","show","onHide","Body","Footer","renderBoard","menu","renderMenu","victoryModal","renderVictoryModal","Container","Component","MenuCard","pathname","option","style","textDecoration","component","Img","img","Title","title","ChoiceCard","Menu","App","path","exact","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c5020c82.chunk.js","sourcesContent":["class ChessLogic {\r\n  constructor(tileArr = emptyArr(), castle = 'KQkq', peasant = '') {\r\n    /** The Chessboard tile representation\r\n     *  This is an 8 by 8 array of TileInfo\r\n     *  TileInfo will have getter & setter for the tiles.\r\n     */\r\n    this.Tiles = generateChessBoard(tileArr);\r\n\r\n    /** Castle is the current availability of castling stored as FEN notation\r\n     *  Passant contains the block where peasants can perform En Passant\r\n     */\r\n    this.Castle = castle;\r\n    this.Winner = 'none';\r\n    this.Passant = peasant;\r\n  }\r\n\r\n  getTiles() {\r\n    return this.Tiles;\r\n  }\r\n\r\n  getTile(row, col) {\r\n    return this.Tiles[row][col];\r\n  }\r\n\r\n  getWinner() {\r\n    return this.Winner;\r\n  }\r\n\r\n  getPiece(row, col) {\r\n    return this.Tiles[row][col].getPiece();\r\n  }\r\n\r\n  movePiece(sourceRow, sourceCol, destRow, destCol, promoteTo = 'Queen') {\r\n    const sourceTile = this.Tiles[sourceRow][sourceCol];\r\n    const destTile = this.Tiles[destRow][destCol];\r\n\r\n    let eaten = destTile.getPiece();\r\n\r\n    if (eaten === 'King') {\r\n      this.Winner = destTile.getColor() === 'white' ?\r\n        'Black' : 'White';\r\n    }\r\n\r\n    destTile.piece = sourceTile.piece;\r\n\r\n    // eslint-disable-next-line default-case\r\n    switch (sourceTile.getPiece()) {\r\n    case ('Pawn'):\r\n      if (this.validPassant(sourceTile, destTile)) {\r\n        eaten = 'Pawn';\r\n        this.Tiles[destRow][sourceCol].piece = 'empty';\r\n      }\r\n      this.handlePromotion(sourceTile, destTile, promoteTo);\r\n      break;\r\n    case ('King'):\r\n      this.handleCastle(sourceTile, destTile);\r\n      this.disableCastle(sourceTile);\r\n      break;\r\n    case ('Rook'):\r\n      this.disableCastle(sourceTile);\r\n      break;\r\n    }\r\n    this.setPassant(sourceTile, destTile);\r\n    sourceTile.piece = 'empty';\r\n\r\n    return eaten;\r\n  }\r\n\r\n  validPassant(sourceTile, destTile) {\r\n    return (sourceTile.getPiece() === 'Pawn' &&\r\n      '' + destTile.row + destTile.col === this.Passant);\r\n  }\r\n\r\n  setPassant(sourceTile, destTile) {\r\n    if (sourceTile.getPiece() === 'Pawn' &&\r\n      Math.abs(destTile.row - sourceTile.row) === 2) {\r\n      const direction = sourceTile.getColor() === 'white' ? 1 : -1;\r\n      this.Passant = '' + (sourceTile.row + direction) + sourceTile.col;\r\n    } else {\r\n      this.Passant = '';\r\n    }\r\n  }\r\n\r\n  handlePromotion(sourceTile, destTile, promoteTo) {\r\n    if (destTile.row === 0 || destTile.row === 7) {\r\n      destTile.piece = sourceTile.getColor() + promoteTo;\r\n    }\r\n  }\r\n\r\n  handleCastle(sourceTile, destTile) {\r\n    if (Math.abs(destTile.col - sourceTile.col) > 1) {\r\n      if (destTile.col === 2) {\r\n        this.movePiece(sourceTile.row, 0, sourceTile.row, 3);\r\n      } else if (destTile.col === 6) {\r\n        this.movePiece(sourceTile.row, 7, sourceTile.row, 5);\r\n      }\r\n    }\r\n  }\r\n\r\n  disableCastle(sourceTile) {\r\n    let letterToReplace = sourceTile.getPiece() === 'King' ? 'KQ' :\r\n      sourceTile.col === 0 ? 'Q' : 'K';\r\n\r\n    if (sourceTile.getColor() === 'black') {\r\n      letterToReplace = letterToReplace.toLowerCase();\r\n    }\r\n\r\n    const regex = new RegExp(letterToReplace, '');\r\n    this.Castle = this.Castle.replace(regex, '');\r\n  }\r\n\r\n  getValidTiles(row, col) {\r\n    const tile = this.Tiles[row][col];\r\n\r\n    const color = tile.getColor();\r\n    const piece = tile.getPiece();\r\n\r\n    const validMoves = [];\r\n\r\n    // eslint-disable-next-line default-case\r\n    switch (piece) {\r\n    case ('Rook'): {\r\n      this.getValidRookTiles(col, row, color, validMoves);\r\n      break;\r\n    }\r\n    case ('Knight'): {\r\n      this.getValidKnightTiles(col, row, color, validMoves);\r\n      break;\r\n    }\r\n    case ('Bishop'): {\r\n      this.getValidBishopTiles(col, row, color, validMoves);\r\n      break;\r\n    }\r\n    case ('King'): {\r\n      this.getValidKingTiles(col, row, color, validMoves);\r\n      break;\r\n    }\r\n    case ('Queen'):\r\n      this.getValidBishopTiles(col, row, color, validMoves);\r\n      this.getValidRookTiles(col, row, color, validMoves);\r\n      break;\r\n    case ('Pawn'): {\r\n      this.getValidPawnTiles(col, row, color, validMoves);\r\n      break;\r\n    }\r\n    }\r\n\r\n    return validMoves;\r\n  }\r\n\r\n  getValidKnightTiles(col, row, color, validMoves) {\r\n    for (let curRow = 1; curRow < 3; curRow++) {\r\n      const curCol = 3 - curRow;\r\n\r\n      this.pushToValid(row + curRow, col + curCol, color, validMoves);\r\n      this.pushToValid(row + curRow, col - curCol, color, validMoves);\r\n      this.pushToValid(row - curRow, col - curCol, color, validMoves);\r\n      this.pushToValid(row - curRow, col + curCol, color, validMoves);\r\n    }\r\n  }\r\n\r\n  getValidRookTiles(col, row, color, validMoves) {\r\n    const rowArr = [-1, 0, 0, 1];\r\n    const colArr = [0, -1, 1, 0];\r\n\r\n    for (let i = 0; i < 4; i++) {\r\n      let curRow = rowArr[i] + row;\r\n      let curCol = colArr[i] + col;\r\n\r\n      while (this.pushToValid(curRow, curCol, color, validMoves)) {\r\n        curRow += rowArr[i];\r\n        curCol += colArr[i];\r\n      }\r\n    }\r\n  }\r\n\r\n  getValidBishopTiles(col, row, color, validMoves) {\r\n    for (let i = 0; i < 5; i++) {\r\n      const colCounter = (i < 1.5) ? 1 : -1;\r\n      let curCol = col + colCounter;\r\n\r\n      const rowCounter = (i % 2) ? 1 : -1;\r\n      let curRow = row + rowCounter;\r\n\r\n      while (this.pushToValid(curRow, curCol, color, validMoves)) {\r\n        curCol += colCounter;\r\n        curRow += rowCounter;\r\n      }\r\n    }\r\n  }\r\n\r\n  getValidKingTiles(col, row, color, validMoves) {\r\n    for (let i = -1; i < 2; i++) {\r\n      for (let j = -1; j < 2; j++) {\r\n        this.pushToValid(row + i, col + j, color, validMoves);\r\n      }\r\n    }\r\n\r\n    const startRow = color === 'white' ? 0 : 7;\r\n\r\n    if (((color === 'white' && this.Castle.includes('K')) ||\r\n      (color === 'black' && this.Castle.includes('k'))) &&\r\n      this.Tiles[startRow][6].getColor() === 'empty' &&\r\n      this.Tiles[startRow][5].getColor() === 'empty') {\r\n      validMoves.push(this.Tiles[startRow][6]);\r\n    }\r\n\r\n    if (((color === 'white' && this.Castle.includes('Q')) ||\r\n      (color === 'black' && this.Castle.includes('q'))) &&\r\n      this.Tiles[startRow][1].getColor() === 'empty' &&\r\n      this.Tiles[startRow][2].getColor() === 'empty' &&\r\n      this.Tiles[startRow][3].getColor() === 'empty') {\r\n      validMoves.push(this.Tiles[startRow][2]);\r\n    }\r\n  }\r\n\r\n  getValidPawnTiles(col, row, color, validMoves) {\r\n    const distance = (row === 1 || row === 6) ? 3 : 2;\r\n    const direction = color === 'white' ? 1 : -1;\r\n\r\n    for (let i = 1; i < distance; i++) {\r\n      const rowDestination = row + i * direction;\r\n      if (rowDestination > 7 || rowDestination < 0) {\r\n        break;\r\n      }\r\n\r\n      const curTile = this.Tiles[rowDestination][col];\r\n\r\n      if (curTile.piece === 'empty') {\r\n        this.pushToValid(row + i * direction, col, color, validMoves);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    this.pushToValidPawn(row + direction, col + 1, color, validMoves);\r\n    this.pushToValidPawn(row + direction, col - 1, color, validMoves);\r\n  }\r\n\r\n  pushToValid(row, col, color, validMoves) {\r\n    if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n      return false;\r\n    }\r\n    const tile = this.Tiles[row][col];\r\n\r\n    if (tile.getColor() === 'empty') {\r\n      validMoves.push(tile);\r\n      return true;\r\n    } else {\r\n      if (tile.getColor() !== color) {\r\n        validMoves.push(tile);\r\n      }\r\n      return false;\r\n    }\r\n  }\r\n\r\n  pushToValidPawn(row, col, color, validMoves) {\r\n    if (row > -1 && row < 8 && col > -1 && col < 8) {\r\n      const tile = this.Tiles[row][col];\r\n\r\n      if ('' + tile.row + tile.col === this.Passant) {\r\n        validMoves.push(tile);\r\n      } else if ((tile.getColor() !== 'empty' && tile.getColor() !== color) ||\r\n          '' + tile.row + tile.col === this.Passant) {\r\n        validMoves.push(tile);\r\n      }\r\n    }\r\n  }\r\n\r\n  clone() {\r\n    return new ChessLogic(\r\n      this.Tiles.map((row) =>\r\n        row.map((tileInfo) => tileInfo.piece),\r\n      ),\r\n      this.Castle,\r\n      this.Passant,\r\n    );\r\n  }\r\n}\r\n\r\nfunction generateChessBoard(pieceArr) {\r\n  const tiles = [];\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    const curRow = [];\r\n    for (let j = 0; j < 8; j++) {\r\n      curRow.push(new TileInfo(i, j, pieceArr[i][j]));\r\n    }\r\n    tiles.push(curRow);\r\n  }\r\n\r\n  return tiles;\r\n}\r\n\r\n\r\nfunction emptyArr() {\r\n  const arr = [];\r\n\r\n  for (let i = 0; i < 8; i++) {\r\n    const curRow = [];\r\n    for (let j = 0; j < 8; j++) {\r\n      curRow.push(generatePiece(i, j));\r\n    }\r\n    arr.push(curRow);\r\n  }\r\n\r\n  return arr;\r\n}\r\n\r\nfunction generatePiece(rowNum, colNum) {\r\n  if (rowNum < 1) {\r\n    switch (Math.abs(7 - 2 * colNum)) {\r\n    case 7:\r\n      return 'whiteRook';\r\n    case 5:\r\n      return 'whiteKnight';\r\n    case 3:\r\n      return 'whiteBishop';\r\n    case 1:\r\n      return colNum === 4 ? 'whiteKing' : 'whiteQueen';\r\n    default:\r\n      return 'empty';\r\n    }\r\n  } else if (rowNum < 2) {\r\n    return 'whitePawn';\r\n  } else if (rowNum < 6) {\r\n    return 'empty';\r\n  } else if (rowNum < 7) {\r\n    return 'blackPawn';\r\n  } else if (rowNum < 8) {\r\n    switch (Math.abs(7 - 2 * colNum)) {\r\n    case 7:\r\n      return 'blackRook';\r\n    case 5:\r\n      return 'blackKnight';\r\n    case 3:\r\n      return 'blackBishop';\r\n    case 1:\r\n      return colNum === 4 ? 'blackKing' : 'blackQueen';\r\n    default:\r\n      return 'empty';\r\n    }\r\n  }\r\n}\r\n\r\nclass TileInfo {\r\n  constructor(rowNum, colNum, piece = this.generatePiece(rowNum, colNum)) {\r\n    this.row = rowNum;\r\n    this.col = colNum;\r\n\r\n    this.piece = piece;\r\n  }\r\n\r\n  getColor() {\r\n    return this.piece.substr(0, 5);\r\n  }\r\n\r\n  getPiece() {\r\n    return this.piece.substr(5);\r\n  }\r\n\r\n  clone() {\r\n    return new TileInfo(this.row, this.col, this.piece);\r\n  }\r\n}\r\n\r\nexport {ChessLogic, TileInfo};\r\n","const pieceValue = {\r\n  'Queen': 90,\r\n  'King': 2000,\r\n  'Rook': 50,\r\n  'Knight': 30,\r\n  'Bishop': 30,\r\n  'Pawn': 10,\r\n  '': 0,\r\n};\r\n\r\n// Time complexity is O(2^n)\r\n// Takes 3 min in my computer when running 6 recursion\r\nexport function generateMoveMinMax(board, turn, recursiveCall) {\r\n  if (recursiveCall === 0) {\r\n    const futureValue = 0;\r\n    const futureMove = '';\r\n\r\n    return {futureMove, futureValue};\r\n  }\r\n\r\n  const nextTurn = turn === 'white' ? 'black' : 'white';\r\n\r\n  // Make sure that the HTML request couldn't take too much processing power\r\n  recursiveCall = Math.min(recursiveCall, 5);\r\n\r\n  let optimalMove = '';\r\n  let optimalValue = 'nodef';\r\n\r\n  for (let row = 0; row < 8; row++) {\r\n    for (let col = 0; col < 8; col++) {\r\n      const tile = board.Tiles[row][col];\r\n\r\n      if (tile.piece.substr(0, 5) === turn) {\r\n        board.getValidTiles(row, col).forEach((validTile) => {\r\n          const nextBoard = board.clone();\r\n\r\n          const curValue = pieceValue[\r\n            nextBoard.movePiece(row, col, validTile.row, validTile.col)];\r\n\r\n          const {futureMove, futureValue} = generateMoveMinMax(nextBoard,\r\n            nextTurn, recursiveCall - 1);\r\n\r\n          if (turn === 'white') {\r\n            if (optimalValue === 'nodef' ||\r\n              curValue + futureValue > optimalValue) {\r\n              optimalValue = futureValue + curValue;\r\n              // eslint-disable-next-line max-len\r\n              optimalMove = '' + row + col + validTile.row + validTile.col + futureMove;\r\n            }\r\n          } else {\r\n            if (optimalValue === 'nodef' ||\r\n              -curValue + futureValue < optimalValue) {\r\n              optimalValue = futureValue - curValue;\r\n              // eslint-disable-next-line max-len\r\n              optimalMove = '' + row + col + validTile.row + validTile.col + futureMove;\r\n            }\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n  return {futureMove: optimalMove, futureValue: optimalValue};\r\n}\r\n","import {ChessLogic} from './ChessLogic';\r\nimport {generateMoveMinMax} from './ChessComputer';\r\n\r\nclass ChessController {\r\n  constructor({afterVictoryCallback = () => {},\r\n    computerOption = 'local', playerColor = 'white'}={}) {\r\n    this.getComputerMove = generateMoveMinMax;\r\n\r\n    this.ChessLogic = new ChessLogic();\r\n    this.Blocks = this.generateBlocks();\r\n    this.turn = 'white';\r\n\r\n    this.emptyBlock = 'empty';\r\n    this.selectedBlock = this.emptyBlock;\r\n\r\n    this.computerOption = computerOption;\r\n    this.playerColor = playerColor;\r\n    this.moveList = [];\r\n\r\n    this.aftermatch = false;\r\n    this.showVictoryScreen = afterVictoryCallback;\r\n  }\r\n\r\n  handleClick(block) {\r\n    if (this.turn !== this.playerColor && this.computerOption === 'computer') {\r\n      return;\r\n    }\r\n\r\n    if (this.selectedBlock === 'empty' ||\r\n      this.selectedBlock.getPiece() === 'empty') {\r\n      if (this.turn === block.getColor()) {\r\n        this.highlight(block);\r\n        this.selectedBlock = block;\r\n      }\r\n    } else if (this.movePiece(block)) {\r\n      this.turn = (this.turn === 'white') ? 'black' : 'white';\r\n\r\n      this.recordMove(block.getPiece().substr(5), block.row, block.col);\r\n\r\n      this.checkWinner();\r\n    }\r\n  }\r\n\r\n  handleComputerTurn() {\r\n    if (this.turn === this.playerColor || this.computerOption !== 'computer') {\r\n      return;\r\n    }\r\n\r\n    // Take the computer future move and map it to int array\r\n    const moveArr = generateMoveMinMax(this.ChessLogic, this.turn, 3)\r\n      .futureMove.split``.map((x)=>+x);\r\n\r\n    this.recordMove(this.ChessLogic.getPiece(moveArr[0], moveArr[1]),\r\n      moveArr[2], moveArr[3]);\r\n\r\n    this.ChessLogic.movePiece(moveArr[0], moveArr[1], moveArr[2], moveArr[3]);\r\n\r\n    this.turn = (this.turn === 'white') ? 'black' : 'white';\r\n\r\n    this.checkWinner();\r\n  }\r\n\r\n  recordMove(piece, destRow, destCol) {\r\n    this.moveList.push(\r\n      (this.moveList.length + 1) + '. \\t' +\r\n      piece +\r\n      ' move to ' +\r\n      String.fromCharCode(destCol + 65) +\r\n      (destRow + 1));\r\n  }\r\n\r\n  checkWinner() {\r\n    if (this.ChessLogic.getWinner() !== 'none' && !this.aftermatch) {\r\n      this.aftermatch = true;\r\n      this.showVictoryScreen(this.ChessLogic.getWinner());\r\n    }\r\n  }\r\n\r\n  movePiece(block) {\r\n    let validMove = false;\r\n\r\n    if (block.type === 'HighlightBlock') {\r\n      this.ChessLogic.movePiece(this.selectedBlock.row, this.selectedBlock.col,\r\n        block.row, block.col);\r\n\r\n      validMove = true;\r\n    }\r\n    this.selectedBlock = this.emptyBlock;\r\n    this.unhighlight();\r\n\r\n    return validMove;\r\n  }\r\n\r\n  highlight(block) {\r\n    this.ChessLogic.getValidTiles(block.row, block.col).forEach( (tile) =>\r\n      this.getBlock(tile).highlight(),\r\n    );\r\n  }\r\n\r\n  unhighlight() {\r\n    this.Blocks.forEach( (blockRow) =>\r\n      blockRow.forEach( (block) => block.unhighlight(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  generateBlocks() {\r\n    const blocks = [];\r\n    for (let row = 0; row < 8; row++) {\r\n      const Row = [];\r\n      for (let col = 0; col < 8; col++) {\r\n        Row.push(new Block(row, col, this.ChessLogic.getTile(row, col)));\r\n      }\r\n      blocks.push(Row);\r\n    }\r\n\r\n    return blocks;\r\n  }\r\n\r\n  getBlock(tile) {\r\n    return this.Blocks[tile.row][tile.col];\r\n  }\r\n}\r\n\r\nclass Block {\r\n  constructor(row, col, tile) {\r\n    this.row = row;\r\n    this.col = col;\r\n    this.tile = tile;\r\n    this.unhighlight();\r\n  }\r\n\r\n  highlight() {\r\n    this.type = 'HighlightBlock';\r\n  }\r\n\r\n  unhighlight() {\r\n    this.type = (this.row + this.col) % 2 ? 'LightBlock' : 'DarkBlock';\r\n  }\r\n\r\n  getColor() {\r\n    return this.tile.getColor();\r\n  }\r\n\r\n  getPiece() {\r\n    return this.tile.getColor() + this.tile.getPiece();\r\n  }\r\n}\r\n\r\nexport default ChessController;\r\n","import React, {Component} from 'react';\r\nimport './ChessBoard.css';\r\nimport {Row, Col, Container, Button, Modal, ListGroup, Card} from 'react-bootstrap';\r\nimport ChessController from './ChessController';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass ChessBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    console.log(props.location.state);\r\n\r\n    if (props.location.state === undefined) {\r\n      props.location.state = {\r\n        computerOption: 'local',\r\n        playerColor: 'white',\r\n      };\r\n    }\r\n\r\n    this.showVictoryScreen = (winner) => {\r\n      this.setState({\r\n        modalShow: true,\r\n        winner: winner,\r\n      });\r\n    };\r\n\r\n    this.ChessController = new ChessController({\r\n      afterVictoryCallback: this.showVictoryScreen,\r\n      computerOption: props.location.state.computerOption,\r\n      playerColor: props.location.state.playerColor,\r\n    });\r\n\r\n    this.state = {\r\n      Blocks: this.ChessController.Blocks,\r\n      winner: 'White',\r\n      modalShow: false,\r\n      closeModal: () => this.setState({modalShow: false}),\r\n    };\r\n\r\n    this.handleClick = this.handleClick.bind(this);\r\n  }\r\n\r\n  handleClick(block) {\r\n    this.ChessController.handleClick(block);\r\n    this.forceUpdate();\r\n\r\n    setTimeout(() => {\r\n      this.ChessController.handleComputerTurn();\r\n      this.forceUpdate();\r\n    }, 1);\r\n  }\r\n\r\n\r\n  getImagePath(piece) {\r\n    return ''.concat('/pieceImages/', piece, '.png');\r\n  }\r\n\r\n  renderBoard() {\r\n    const block = this.state.Blocks.slice(0).reverse().map(\r\n      // Map each block row into an HTML row\r\n      (blockRow) => {\r\n        // Map each block' row's column into an individual HTML button\r\n        const rowContent = blockRow.map((block) => {\r\n          return (\r\n            <Col\r\n              key={block.col + block.row * 8}\r\n              onClick={this.handleClick.bind(this, block)}\r\n              id={block.type}>\r\n\r\n              {block.getPiece() === 'empty' ? null :\r\n                <img\r\n                  src={this.getImagePath(block.getPiece())}\r\n                  id={block.type + 'Piece'}\r\n                  alt={block.getPiece()}\r\n                />}\r\n\r\n            </Col>\r\n          );\r\n        });\r\n\r\n        return (\r\n          <Row key={rowContent[0].key / 8}>{rowContent}</Row>\r\n        );\r\n      },\r\n    );\r\n\r\n    return (\r\n      <div className=\"Square\">{block}</div>\r\n    );\r\n  }\r\n\r\n  renderMenu() {\r\n    return (\r\n      <Card className=\"SideMenu\">\r\n        <Link to=\"/\">\r\n          <Button block>Return to Main Menu</Button>\r\n        </Link>\r\n\r\n        <ListGroup variant=\"flush\" className=\"MoveList\">\r\n          {this.ChessController.moveList.map(\r\n            (item) => {\r\n              return (\r\n                <ListGroup.Item id=\"MoveItem\">{item}</ListGroup.Item>\r\n              );\r\n            },\r\n          )}\r\n        </ListGroup>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  // TOOD: OnHide should have a better function\r\n  renderVictoryModal() {\r\n    return (\r\n      <Modal\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n        show={this.state.modalShow}\r\n        onHide={()=>{}}\r\n      >\r\n        <Modal.Body>\r\n          <h4>{this.state.winner} Wins!</h4>\r\n          <p>\r\n            Return to the main menu for a new game.\r\n          </p>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button onClick={this.state.closeModal}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const board = this.renderBoard();\r\n    const menu = this.renderMenu();\r\n    const victoryModal = this.renderVictoryModal();\r\n\r\n    return (\r\n      <Container className=\"Centered\">\r\n        {victoryModal}\r\n        {board}\r\n        {menu}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChessBoard;\r\n","import React from 'react';\r\nimport {Row, Col, Card} from 'react-bootstrap';\r\nimport {Link} from 'react-router-dom';\r\nimport './Menu.css';\r\n\r\nfunction MenuCard(props) {\r\n  return (\r\n    <Col className=\"MenuCard\">\r\n      <Link to={{\r\n        pathname: '/play',\r\n        state: {option: props.option},\r\n      }} style={{textDecoration: 'inherit', color: 'inherit'}}>\r\n        <Card component>\r\n          <Card.Img variant=\"top\" src={props.img} />\r\n          <Card.Body>\r\n            <Card.Title>{props.title}</Card.Title>\r\n          </Card.Body>\r\n        </Card>\r\n      </Link>\r\n    </Col>\r\n  );\r\n}\r\n\r\nfunction ChoiceCard(props) {\r\n  return (\r\n    <Col className=\"MenuCard\">\r\n      <Card>\r\n        <Card.Img variant=\"top\" src={props.img} />\r\n        <Card.Body>\r\n          <Card.Title>{props.title}</Card.Title>\r\n        </Card.Body>\r\n      </Card>\r\n\r\n      <div className=\"Underneath\">\r\n        <Row className=\"Row\">\r\n          <Link className=\"Link\" to={{\r\n            pathname: '/play',\r\n            state: {computerOption: props.computerOption,\r\n              playerColor: 'white'},\r\n          }} style={{textDecoration: 'inherit', color: 'inherit'}}>\r\n            <Card className=\"Choice\">\r\n              <Card.Img variant=\"top\" src={'menu/white.jpg'} />\r\n              <Card.Body>\r\n                <Card.Title>Play as White</Card.Title>\r\n              </Card.Body>\r\n            </Card>\r\n          </Link>\r\n\r\n          <Link className=\"Link\" to={{\r\n            pathname: '/play',\r\n            state: {computerOption: props.computerOption,\r\n              playerColor: 'black'},\r\n          }} style={{textDecoration: 'inherit', color: 'inherit'}}>\r\n            <Card className=\"Choice\">\r\n              <Card.Img variant=\"top\" src={'menu/black.jpg'} />\r\n              <Card.Body>\r\n                <Card.Title>Play as Black</Card.Title>\r\n              </Card.Body>\r\n            </Card>\r\n          </Link>\r\n        </Row>\r\n      </div>\r\n    </Col>\r\n  );\r\n}\r\n\r\nfunction Menu() {\r\n  return (\r\n    <Row className=\"Centered\">\r\n      <MenuCard\r\n        option={'local'}\r\n        img={'menu/local.jpg'}\r\n        title={'Local Multiplayer'}\r\n      />\r\n\r\n      <ChoiceCard\r\n        computerOption={'computer'}\r\n        img={'menu/computer.jpg'}\r\n        title={'Versus Computer'}\r\n      />\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Menu;\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\r\nimport ChessBoard from './component/ChessBoard';\r\nimport Menu from './component/Menu';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/\" exact component={Menu}/>\r\n            <Route path=\"/play\" exact component={ChessBoard}/>\r\n          </Switch>\r\n        </Router>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/* eslint-disable */\r\n\r\n// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}